{"version":3,"sources":["Card.js","Deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","angle","Math","random","xPos","yPos","_transform","concat","react_default","a","createElement","style","transform","className","src","image","alt","name","Component","API_BASE_URL","Deck","state","deck","drawn","getCard","bind","assertThisInitialized","axios","get","setState","data","deck_id","cardUrl","cardRes","success","Error","card","cards","console","log","st","toConsumableArray","id","code","value","suit","alert","_context2","t0","map","c","src_Card_0","key","onClick","App","src_Deck_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAsBeA,qBAlBb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACN,IAAIQ,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAuB,GAAhBF,KAAKC,SAAgB,GAC5BE,EAAuB,GAAhBH,KAAKC,SAAgB,GAJf,OAKjBT,EAAKY,WAAL,aAAAC,OAA+BH,EAA/B,QAAAG,OAA0CF,EAA1C,eAAAE,OAA4DN,EAA5D,QALiBP,wEAQjB,OACEc,EAAAC,EAAAC,cAAA,OACEC,MAAO,CAAEC,UAAWf,KAAKS,YACzBO,UAAU,OACVC,IAAKjB,KAAKJ,MAAMsB,MAChBC,IAAKnB,KAAKJ,MAAMwB,cAdLC,uCCCbC,EAAe,0CAqDNC,cAlDb,SAAAA,EAAY3B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuB,IACjB1B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyB,GAAApB,KAAAH,KAAMJ,KACD4B,MAAQ,CAAEC,KAAM,KAAMC,MAAO,IAClC7B,EAAK8B,QAAU9B,EAAK8B,QAAQC,KAAb9B,OAAA+B,EAAA,EAAA/B,QAAA+B,EAAA,EAAA/B,CAAAD,KAHEA,iNAMAiC,IAAMC,IAAN,GAAArB,OAAaY,EAAb,yBAAbG,SACJzB,KAAKgC,SAAS,CAAEP,KAAMA,EAAKQ,sQAGvBC,EAAUlC,KAAKwB,MAAMC,KAAKS,iBAExBC,YAAab,cAAgBY,qBACbJ,IAAMC,IAAII,cAA1BC,UACSH,KAAKI,8BACV,IAAIC,MAAM,6BAEdC,EAAOH,EAAQH,KAAKO,MAAM,GAC9BC,QAAQC,IAAIN,EAAQH,MACpBjC,KAAKgC,SAAS,SAACW,GAAD,MAAS,CACrBjB,MAAK,GAAAhB,OAAAZ,OAAA8C,EAAA,EAAA9C,CACA6C,EAAGjB,OADH,CAEH,CACEmB,GAAIN,EAAKO,KACT5B,MAAOqB,EAAKrB,MACZE,KAAI,GAAAV,OAAK6B,EAAKQ,MAAV,QAAArC,OAAsB6B,EAAKS,8DAKrCC,MAAKC,EAAAC,iJAKP,IAAMX,EAAQxC,KAAKwB,MAAME,MAAM0B,IAAI,SAACC,GAAD,OACjC1C,EAAAC,EAAAC,cAACyC,EAAD,CAAMC,IAAKF,EAAER,GAAIzB,KAAMiC,EAAEjC,KAAMF,MAAOmC,EAAEnC,UAE1C,OACEP,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,cAAd,6BACAL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,uBAAd,iCACAL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,WAAWwC,QAASxD,KAAK2B,SAA3C,aAGAhB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBAAiBwB,WA9CrBnB,aCQJoC,0LARX,OACE9C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC6C,EAAD,cAJUrC,cCQEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dd7bb853.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Card.css\";\n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n    let angle = Math.random() * 90 - 45;\n    let xPos = Math.random() * 40 - 20;\n    let yPos = Math.random() * 40 - 20;\n    this._transform = `translate(${xPos}px, ${yPos}px) rotate(${angle}deg)`;\n  }\n  render() {\n    return (\n      <img\n        style={{ transform: this._transform }}\n        className='Card'\n        src={this.props.image}\n        alt={this.props.name}\n      />\n    );\n  }\n}\nexport default Card;\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport \"./Deck.css\";\nimport axios from \"axios\";\nconst API_BASE_URL = \"https://www.deckofcardsapi.com/api/deck\";\n\nclass Deck extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { deck: null, drawn: [] };\n    this.getCard = this.getCard.bind(this);\n  }\n  async componentDidMount() {\n    let deck = await axios.get(`${API_BASE_URL}/new/shuffle/`);\n    this.setState({ deck: deck.data });\n  }\n  async getCard() {\n    let deck_id = this.state.deck.deck_id;\n    try {\n      let cardUrl = `${API_BASE_URL}/${deck_id}/draw/`;\n      let cardRes = await axios.get(cardUrl);\n      if (!cardRes.data.success) {\n        throw new Error(\"No card remaining!\");\n      }\n      let card = cardRes.data.cards[0];\n      console.log(cardRes.data);\n      this.setState((st) => ({\n        drawn: [\n          ...st.drawn,\n          {\n            id: card.code,\n            image: card.image,\n            name: `${card.value} of ${card.suit}`,\n          },\n        ],\n      }));\n    } catch (err) {\n      alert(err);\n    }\n  }\n\n  render() {\n    const cards = this.state.drawn.map((c) => (\n      <Card key={c.id} name={c.name} image={c.image} />\n    ));\n    return (\n      <div className=\"Deck\">\n        <h1 className=\"Deck-title\">♦ Card Dealer ♦</h1>\n        <h2 className=\"Deck-title subtitle\">♦ Made with React ♦</h2>\n        <button className=\"Deck-btn\" onClick={this.getCard}>\n          Get Card!\n        </button>\n        <div className=\"Deck-cardarea\">{cards}</div>\n      </div>\n    );\n  }\n}\nexport default Deck;\n","import React, { Component } from \"react\";\nimport Deck from \"./Deck\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Deck />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}